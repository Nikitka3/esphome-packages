text_sensor:
  - platform: modbus_controller
    id: ${id}_current
    modbus_controller_id: map6s
    address: 250
    register_type: read
    response_size: 32
    skip_updates: 10
    name: ${name} Version
    icon: mdi:identifier
    entity_category: diagnostic
    lambda: |-
      std::string result;
      for (auto ch : data) if (ch) result += ch;
      return result;

  - platform: template
    id: ${id}_available
    name: ${name} Version Available
    update_interval: never
    icon: mdi:identifier
    entity_category: diagnostic

binary_sensor:
  - platform: template
    id: ${id}_update_available
    name: ${name} Update
    device_class: update
    entity_category: diagnostic
    lambda: |-
      if (id(${id}_current).state.empty() || id(${id}_available).state.empty()) return {};
      return id(${id}_current).state != id(${id}_available).state;

http_request:
  verify_ssl: false

script:
  - id: get_${id}_available
    then:
      - http_request.get:
          url: https://fw-releases.wirenboard.com/${id}/by-signature/map6s/main/latest.txt
          capture_response: true
          on_response:
            - text_sensor.template.publish:
                id: ${id}_available
                state: !lambda "return body;"
